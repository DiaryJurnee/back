// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Clusters.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.HasKey("Id")
                        .HasName("pk_clusters");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_clusters_owner_id");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_clusters_workspace_id");

                    b.ToTable("clusters", (string)null);
                });

            modelBuilder.Entity("Domain.DayContents.DayContent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uuid")
                        .HasColumnName("day_id");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_day_contents");

                    b.HasIndex("DayId")
                        .HasDatabaseName("ix_day_contents_day_id");

                    b.ToTable("day_contents", (string)null);
                });

            modelBuilder.Entity("Domain.Days.Day", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("uuid")
                        .HasColumnName("cluster_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_days");

                    b.HasIndex("ClusterId")
                        .HasDatabaseName("ix_days_cluster_id");

                    b.ToTable("days", (string)null);
                });

            modelBuilder.Entity("Domain.SystemRoles.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_system_roles");

                    b.ToTable("system_roles", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.UsersWorkspaces.UserWorkspace", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("workspace_id");

                    b.Property<bool>("CanCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanInviteOtherUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("can_invite_other_user");

                    b.Property<bool>("CanReadAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("can_read_all");

                    b.Property<bool>("CanUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId", "WorkspaceId")
                        .HasName("pk_users_workspaces");

                    b.HasIndex("WorkspaceId")
                        .HasDatabaseName("ix_users_workspaces_workspace_id");

                    b.ToTable("users_workspaces", (string)null);
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("pk_workspaces");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_workspaces_owner_id");

                    b.ToTable("workspaces", (string)null);
                });

            modelBuilder.Entity("Domain.Clusters.Cluster", b =>
                {
                    b.HasOne("Domain.Users.User", "Owner")
                        .WithMany("Clusters")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Cluster_OwnerId");

                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany("Clusters")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Workspace_Cluster_WorkspaceId");

                    b.Navigation("Owner");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.DayContents.DayContent", b =>
                {
                    b.HasOne("Domain.Days.Day", "Day")
                        .WithMany("DayContents")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DayContent_Day_DayId");

                    b.Navigation("Day");
                });

            modelBuilder.Entity("Domain.Days.Day", b =>
                {
                    b.HasOne("Domain.Clusters.Cluster", "Cluster")
                        .WithMany("Days")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Day_Cluster_ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.SystemRoles.SystemRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_SystemRole_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.UsersWorkspaces.UserWorkspace", b =>
                {
                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("UsersWorkspaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserWorkspace_User_UserId");

                    b.HasOne("Domain.Workspaces.Workspace", "Workspace")
                        .WithMany("Users")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Workspace_UserWorkspace_WorkspaceId");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.HasOne("Domain.Users.User", "Owner")
                        .WithMany("Workspaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Workspace_User_OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Domain.Clusters.Cluster", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Domain.Days.Day", b =>
                {
                    b.Navigation("DayContents");
                });

            modelBuilder.Entity("Domain.SystemRoles.SystemRole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("UsersWorkspaces");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Domain.Workspaces.Workspace", b =>
                {
                    b.Navigation("Clusters");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
